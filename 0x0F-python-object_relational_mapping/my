#!/usr/bin/python3

"""
This module contains the class definition of a State and
an instance Base = declarative_base() of SQLAlchemy
"""
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from relationship_city import City

Base = declarative_base()


class State(Base):
    """State Class, inherits table metadata from Base

    Attributes:
        __tablename__: defines the table name
        id: unique id for each State instance
        name: name of the state
    """

    __tablename__ = 'states'

    id = Column(Integer, primary_key=True,
                autoincrement=True, nullable=False)
    name = Column(String(128), nullable=False)
    cities = relationship("City", back_populates="state")

    def __str__(self):
        return "{}: {}".format(self.id, self.name)
#!/usr/bin/python3

"""
This module contains the class definition of a City
Inherits from Base imported from model_state.py
"""
from model_state import Base, State
from sqlalchemy import Column, Integer, String
from sqlalchemy import ForeignKey


class City(Base):
    """City Class, inherits table metadata from Base

    Attributes:
        __tablename__: defines the table name
        id: unique id for each State instance
        name: name of the state
        state_id: foreign key to state.id
    """

    __tablename__ = 'cities'

    id = Column(Integer, primary_key=True,
                autoincrement=True, nullable=False)
    name = Column(String(128), nullable=False)
    state_id = Column(Integer, ForeignKey('state.id'), nullable=False)

    def __str__(self):
        return "{}: {}".format(self.id, self.name)
#!/usr/bin/python3
"""Start link class to table in database 
"""
import sys
from relationship_state import Base, State

from sqlalchemy import (create_engine)
from sqlalchemy.orm import sessionmaker

if __name__ == "__main__":
    engine = create_engine('mysql+mysqldb://{}:{}@localhost/{}'.format(sys.argv[1], sys.argv[2], sys.argv[3]), pool_pre_ping=True)
    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    California = State(name='California')

    session.add('California')
    session.commit()

    San_Francisco = City(name='San Francisco', state='California')

    session.add('San_Francisco')
    session.commit()
